<?php

namespace SnooPHP\Facebook;

use SnooPHP\Http\Curl\Get;
use SnooPHP\Http\Curl\Post;

/**
 * Perform raw api requests or use dedicated methods
 * 
 * Requests can be saved in a dedicated cache
 * 
 * @author Sneppy
 */
class Api
{
	/**
	 * @var string $clientId application client id
	 */
	protected $clientId;

	/**
	 * @var string $clientSecret application secret id
	 */
	protected $clientSecret;

	/**
	 * @var object $token user access token, used for api requests
	 * 
	 * Access token can either be generated by the auth flow, or injected manually
	 */
	protected $token;

	/**
	 * @var string $version api version (default: v1)
	 */
	protected $version = "v1";

	/**
	 * @var string $cacheClass cache class
	 */
	protected $cacheClass = "SnooPHP\Facebook\NullCache";

	/**
	 * @const ENDPOINT facebook api endpoint
	 */
	const ENDPOINT = "https://api.facebook.com";

	/**
	 * @const ENDPOINT_ACCOUNT facebook accounts endpoint, used to retrieve tokens
	 */
	const ENDPOINT_ACCOUNT = "https://accounts.facebook.com";

	/**
	 * Perform a generic query
	 * 
	 * @param string $query query string (with parameters)
	 * 
	 * @return object|bool false if fails
	 */
	public function query($query)
	{
		// If no access token, abort
		if (!$this->token || empty($this->token->access_token)) return false;

		// Check if cached result exists
		if ($record = $this->cacheClass::fetch($query, $this->authToken())) return $record;

		// Make api request
		$uri	= preg_match("/^https?:\/\//", $query) ? $query : static::ENDPOINT."/{$this->version}/{$query}";
		$curl	= Get::withAuth($uri, $this->authToken());
		if ($curl && $curl->success())
		{
			// Save record in cache and return it
			$raw = $curl->content();
			return $this->cacheClass::store($query, $this->authToken(), $raw);
		}
		else
			return false;
	}

	/**
	 * Get app refreshable token
	 * 
	 * @return object|false
	 */
	public function getAppToken()
	{
		$curl = Post::withAuth(
			static::ENDPOINT_ACCOUNT."/api/token",
			"Basic {$this->generateAppAuthHeader()}",
			http_build_query(["grant_type" => "client_credentials"])
		);

		if ($curl && $curl->success())
		{
			$this->token = $curl->content(true);
			return $this->token;
		}
		else
			return false;
	}

	/**
	 * Get authorization token header
	 * 
	 * @return string
	 */
	protected function authToken()
	{
		return $this->token->token_type." ".$this->token->access_token;
	}

	/**
	 * Generate authorization header given client id and secret
	 * 
	 * @return string
	 */
	protected function generateAppAuthHeader()
	{
		return base64_encode("{$this->clientId}:{$this->clientSecret}");
	}

	/**
	 * Create a new instance from client id and secret
	 * 
	 * @param string	$clientId		client id
	 * @param string	$clientSecret	client secret
	 * 
	 * @return Api
	 */
	public static function byClient($clientId, $clientSecret)
	{
		$api = new static();
		$api->clientId		= $clientId;
		$api->clientSecret	= $clientSecret;
		return $api;
	}
	
	/**
	 * Create a new instance from existing access token
	 * 
	 * @param string $token provided access token
	 * 
	 * @return Api
	 */
	public static function byToken($token)
	{
		$api = new static();
		$api->token = $token;
		return $api;
	}
}